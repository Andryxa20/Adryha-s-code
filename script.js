document.addEventListener('DOMContentLoaded', function() { // –ö–æ–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å
  const btn = document.getElementById('sayHiBtn'); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –∑–∞ id
  if (btn) { // –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∞ —ñ—Å–Ω—É—î
    btn.addEventListener('click', function() { // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó "–∫–ª—ñ–∫"
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      alert("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –ë–∞–º–±–ª–±—ñ, —É —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ!");
      
      // –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å–∏ –¥–æ –≥—Ä–∏ (—è–∫—â–æ –≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞)
      if (typeof gameState !== 'undefined') {
        gameState.energy = Math.min(100, gameState.energy + 5);
        gameState.focus = Math.min(100, gameState.focus + 3);
        
        if (typeof showNotification === 'function') {
          showNotification('ü§ñ –ë–∞–º–±–ª–±—ñ –º–æ—Ç–∏–≤—É–≤–∞–≤ —Ç–µ–±–µ! +5 –µ–Ω–µ—Ä–≥—ñ—ó, +3 —Ñ–æ–∫—É—Å—É', 'success');
        }
        
        if (typeof updateUI === 'function') {
          updateUI();
        }
      }
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
      const rect = this.getBoundingClientRect();
      showFloatingText('–ë–∞–º–±–ª–±—ñ –≤—ñ—Ä–∏—Ç—å —É —Ç–µ–±–µ! +5 –µ–Ω–µ—Ä–≥—ñ—ó', rect.left + rect.width/2, rect.top);
    });
    
    // –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
    btn.addEventListener('mouseenter', showTooltipForElement);
    btn.addEventListener('mouseleave', hideTooltipForElement);
    btn.addEventListener('mousemove', moveTooltipForElement);
  }
});

function spawnSmartTransformer() {
  const button = document.createElement("button");
  button.className = "transformer-btn";

  const maxX = window.innerWidth - 100;
  const maxY = window.innerHeight - 100;
  let x = Math.random() * maxX;
  let y = Math.random() * maxY;

  let dx = (Math.random() - 0.5) * 2;
  let dy = (Math.random() - 0.5) * 2;
  let speed = 6; // —Å—Ç–∞—Ä—Ç–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å

  button.style.left = `${x}px`;
  button.style.top = `${y}px`;

  const img = document.createElement("img");
  img.src = "transformes.png"; // –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ñ–∞–π–ª
  img.style.width = "100%";
  img.style.height = "auto";
  button.appendChild(img);

  // –ö–ª—ñ–∫ ‚Äî –∑–Ω–∏—â–µ–Ω–Ω—è + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–π
  button.onclick = () => {
    alert("ü•≥–¢–∏ —Å–ø—ñ–π–º–∞–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞, —Ç–∏ –ø–µ—Ä–µ–º—ñ–≥ü•≥!");
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–π
    if (typeof interactWithPageElement === 'function') {
      interactWithPageElement('transformerCatch');
    }
    
    clearInterval(move);
    clearInterval(slowDown);
    button.remove();
  };

  document.getElementById("transformer-buttons").appendChild(button);

  // üëâ –°–ª—É—Ö–∞—î–º–æ –º–∏—à–∫—É
  document.addEventListener("mousemove", (e) => {
    const distX = e.clientX - x;
    const distY = e.clientY - y;
    const distance = Math.sqrt(distX ** 2 + distY ** 2);

    if (distance < 150) {
      // –Ø–∫—â–æ –º–∏—à–∫–∞ –±–ª–∏–∑—å–∫–æ ‚Äî —Ç—ñ–∫–∞–π
      dx = -distX / distance;
      dy = -distY / distance;
      speed = 10; // –†—ñ–∑–∫–∏–π —Ä–∏–≤–æ–∫
    }
  });

  // üîÅ –†—É—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
  const move = setInterval(() => {
    x += dx * speed;
    y += dy * speed;

    // –ú–µ–∂—ñ ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–æ, —â–æ–± –Ω–µ –∑–∞—Å—Ç—Ä—è–≥–∞–≤
if (x <= 0) {
  x = 1;        // –í—ñ–¥—ñ–π–¥–∏ –≤—ñ–¥ –∫—Ä–∞—é
  dx = Math.abs(dx); // –ô–¥–∏ –≤–ø—Ä–∞–≤–æ
}
if (x >= maxX) {
  x = maxX - 1;
  dx = -Math.abs(dx); // –ô–¥–∏ –≤–ª—ñ–≤–æ
}
if (y <= 0) {
  y = 1;
  dy = Math.abs(dy); // –í–Ω–∏–∑
}
if (y >= maxY) {
  y = maxY - 1;
  dy = -Math.abs(dy); // –í–≥–æ—Ä—É
}

    button.style.left = `${x}px`;
    button.style.top = `${y}px`;
  }, 20);

  // üê¢ –ü–æ–≤—ñ–ª—å–Ω—ñ—à–µ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
  const slowDown = setInterval(() => {
    speed = Math.max(1, speed - 0.5); // –Ω–µ –Ω–∏–∂—á–µ 1
  }, 1000);

  // ‚åõ –ê–≤—Ç–æ–∑–Ω–∏–∫–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫
  setTimeout(() => {
    clearInterval(move);
    clearInterval(slowDown);
    button.remove();
  }, 15000);
}

// –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω—ñ 15 —Å–µ–∫
setInterval(spawnSmartTransformer, 15000);

document.addEventListener('DOMContentLoaded', () => {
  const toggleLangBtn = document.getElementById('toggle-lang');
  if (!toggleLangBtn) return;

  let isUkrainian = true;

  toggleLangBtn.addEventListener('click', () => {
    const uaTexts = document.querySelectorAll('.lang-ua');
    const enTexts = document.querySelectorAll('.lang-en');

    uaTexts.forEach(el => el.classList.toggle('hidden'));
    enTexts.forEach(el => el.classList.toggle('hidden'));

    toggleLangBtn.textContent = isUkrainian ? 'üîÅ Translate' : 'üîÅ –ü–µ—Ä–µ–∫–ª–∞–¥';
    isUkrainian = !isUkrainian;
  });
});

function openTab(tabId) {
  const contents = document.querySelectorAll('.tab-content');
  const buttons = document.querySelectorAll('.tab-button');

  contents.forEach(c => c.classList.remove('active'));
  buttons.forEach(b => b.classList.remove('active'));

  document.getElementById(tabId).classList.add('active');
  event.currentTarget.classList.add('active');
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
document.addEventListener('DOMContentLoaded', function() {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞–º
  function addTooltipToTransformers() {
    const transformers = document.querySelectorAll('.moving-transformer');
    transformers.forEach(transformer => {
      transformer.setAttribute('data-tooltip', 'ü§ñ –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞! +50 –¥–æ—Å–≤—ñ–¥—É, +5 –∑–Ω–∞–Ω—å, +10 —Ñ–æ–∫—É—Å—É');
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫
      transformer.addEventListener('mouseenter', showTooltipForElement);
      transformer.addEventListener('mouseleave', hideTooltipForElement);
      transformer.addEventListener('mousemove', moveTooltipForElement);
      
      // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      transformer.addEventListener('click', function(e) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
        showFloatingText('+50 XP!', e.clientX, e.clientY);
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        this.style.transform = 'scale(1.5) rotate(360deg)';
        this.style.opacity = '0';
        
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–π
        if (typeof interactWithPageElement === 'function') {
          interactWithPageElement('transformerCatch');
        }
        
        setTimeout(() => {
          this.remove();
        }, 500);
      });
    });
  }
  
  // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞–º–∏
  const observer = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(function(node) {
          if (node.nodeType === 1 && node.classList && node.classList.contains('moving-transformer')) {
            // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ –Ω–æ–≤–æ–º—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—É
            node.setAttribute('data-tooltip', 'ü§ñ –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞! +50 –¥–æ—Å–≤—ñ–¥—É, +5 –∑–Ω–∞–Ω—å, +10 —Ñ–æ–∫—É—Å—É');
            
            node.addEventListener('mouseenter', showTooltipForElement);
            node.addEventListener('mouseleave', hideTooltipForElement);
            node.addEventListener('mousemove', moveTooltipForElement);
            
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫
            node.addEventListener('click', function(e) {
              showFloatingText('+50 XP!', e.clientX, e.clientY);
              this.style.transform = 'scale(1.5) rotate(360deg)';
              this.style.opacity = '0';
              
              if (typeof interactWithPageElement === 'function') {
                interactWithPageElement('transformerCatch');
              }
              
              setTimeout(() => {
                this.remove();
              }, 500);
            });
          }
        });
      }
    });
  });
  
  // –ù–∞—á–∞—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞–º
  setTimeout(addTooltipToTransformers, 1000);
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
function showTooltipForElement(e) {
  let tooltip = document.getElementById('game-tooltip');
  if (!tooltip) {
    tooltip = document.createElement('div');
    tooltip.id = 'game-tooltip';
    tooltip.className = 'game-tooltip';
    document.body.appendChild(tooltip);
  }
  
  const text = e.target.getAttribute('data-tooltip');
  if (text) {
    tooltip.textContent = text;
    tooltip.style.display = 'block';
    tooltip.style.opacity = '1';
  }
}

function hideTooltipForElement() {
  const tooltip = document.getElementById('game-tooltip');
  if (tooltip) {
    tooltip.style.opacity = '0';
    setTimeout(() => {
      tooltip.style.display = 'none';
    }, 200);
  }
}

function moveTooltipForElement(e) {
  const tooltip = document.getElementById('game-tooltip');
  if (tooltip) {
    tooltip.style.left = (e.pageX + 10) + 'px';
    tooltip.style.top = (e.pageY - 30) + 'px';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
function showFloatingText(text, x, y) {
  const floatingText = document.createElement('div');
  floatingText.textContent = text;
  floatingText.style.cssText = `
    position: fixed;
    left: ${x}px;
    top: ${y}px;
    color: #ffd700;
    font-size: 24px;
    font-weight: bold;
    pointer-events: none;
    z-index: 9999;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    animation: floatUp 2s ease-out forwards;
  `;
  
  document.body.appendChild(floatingText);
  
  setTimeout(() => {
    floatingText.remove();
  }, 2000);
}

// –î–æ–±–∞–≤–∏—Ç—å CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!document.querySelector('#floating-text-styles')) {
  const style = document.createElement('style');
  style.id = 'floating-text-styles';
  style.textContent = `
    @keyframes floatUp {
      0% {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
      50% {
        transform: translateY(-30px) scale(1.2);
      }
      100% {
        opacity: 0;
        transform: translateY(-80px) scale(0.8);
      }
    }
  `;
  document.head.appendChild(style);
}

